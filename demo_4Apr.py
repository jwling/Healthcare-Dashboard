import dashimport dash_core_components as dccimport dash_html_components as htmlimport pandas as pdimport numpy as npimport dash_tableimport plotly.plotly as pyimport plotly.graph_objs as gofrom dash import Dashfrom dash.dependencies import Input, Output, Stateimport dash_daq as daqimport randomimport base64app = dash.Dash(__name__)##################################   Connecting to Data Source   ################################### Reading data#full_data = pd.read_csv('./dashboarddataBT3101.2019.csv', encoding = "ISO-8859-1")full_data = pd.read_csv('./fulldata.csv') #uncomment for dummy datafull_data = pd.read_csv('./fulldatab.csv') #uncomment for dummy data with NA values# Use only required columns### for dummy csv dataset ###surgery_admin_details = ['Procedure.Code','Consultant.In.Charge.Staff.Id','Case.No','Procedure.Description','Start.Time']patient_details = ['Age','Gender','Race','ASA.Status','Op.History','Type.of.Patient','Priority.of.Operation','Method.of.Operation','Op.Risk']surgery_team_details = ['First.Surgeon.Title','First.Surgeon.Department.Code','First.Surgeon.Staff.Id','Principal.Anaesthetist.Staff.Id','Principal.Anaesthetist.Title','Primary.Anae']duration_details = ['Predicted.Duration','Actual.Duration','Listing.Duration','Lower.Bound','Upper.Bound','Moving.Average']all_details = surgery_admin_details + patient_details + surgery_team_details + duration_detailsfull_data = full_data[all_details]# Time preprocessingfull_data['Start.Time'] = pd.to_datetime(full_data['Start.Time']) #date is not uniquefull_data = full_data.sort_values(by='Start.Time')# Drop NA#full_data = full_data.dropna()# Create a more realistic Moving Average for now, not necessary when reading the actual onemean_duration = full_data["Actual.Duration"].mean()full_data["Moving.Average"] = random.choices([mean_duration-3, mean_duration, mean_duration+3], k=len(full_data))# still have to create 0.9 and 1.1 for the actual onefull_data["Upper.Bound"] = full_data["Moving.Average"]*1.1full_data["Lower.Bound"] = full_data["Moving.Average"]*0.9'''### for actual csv dataset ###surgery_admin_details = ['Procedure.Code','Consultant.In.Charge.Staff.Id','Case.No','Diag1','Diag2','Start.Time']#to join 'Diag1' and 'Diag2' to be 'Procedure.Description'patient_details = ['Age','Gender','Race','ASA.Status','Op.History','Type.of.Patient','Priority.of.Operation','Method.of.Operation','Ops.Risk']#rename 'Ops.Risk' to 'Op.Risk'surgery_team_details = ['First.Surgeon.Title','First.Surgeon.Department.Code','First.Surgeon.Staff.Id','Principal.Anaesthetist.Staff.Id','Principal.Anaesthetist.Title','Anaesthesia1']#rename 'Anaesthesia1' to 'Primary.Anae'duration_details = ['pred','Actual.Duration','Listing.Duration','MA.1year_3rd']#rename 'pred' to 'Predicted.Duration'#rename 'MA.1year_3rd' to 'Moving.Average'#calculate lower (10%) and upper (90%) bound of actual duration for each set of procedure code (i.e. group by) and name as 'Lower.Bound' and 'Upper.Bound' respectivelyall_details = surgery_admin_details + patient_details + surgery_team_details + duration_detailsfull_data = full_data[all_details]# Renamingfull_data['Procedure.Description'] = full_data['Diag1']+ ', ' + full_data['Diag2']full_data = full_data.rename(columns = {'Ops.Risk':'Op.Risk', 'Anaesthesia1':'Primary.Anae', 'pred':'Predicted.Duration', 'MA.1year_3rd':'Moving.Average'})# Time preprocessingfull_data['Start.Time'] = pd.to_datetime(full_data['Start.Time']) #date is not uniquefull_data = full_data.sort_values(by='Start.Time')# Drop NA#full_data = full_data.dropna()#Calculate bounds 'Lower.Bound' and 'Upper.Bound'actual_duration = full_data[['Procedure.Code','Actual.Duration']]grouped = actual_duration.groupby('Procedure.Code')lower_bound_df = grouped.quantile(0.1).reset_index().rename(columns = {'Actual.Duration':'_10.Percentile'}) #10th percentileupper_bound_df = grouped.quantile(0.9).reset_index().rename(columns = {'Actual.Duration':'_90.Percentile'}) #90th percentilefull_data = full_data.merge(lower_bound_df, on='Procedure.Code', how='left').rename(columns = {'_10.Percentile':'Lower.Bound'})full_data = full_data.merge(upper_bound_df, on='Procedure.Code', how='left').rename(columns = {'_90.Percentile':'Upper.Bound'})'''# For Table - necessary because of the headers (not the data)# when changing columns, go to Table Callback and change it to be the same as welltable_columns = ['Procedure.Code','Case.No','Consultant.In.Charge.Staff.Id','First.Surgeon.Title','Actual.Duration','Listing.Duration','Predicted.Duration'] # order matterstable_data = full_data[table_columns][0:1] # just plot the first row of data - will be reset/ replaced by callbacktable_data.columns = ['Code','Case No.','Consultant In Charge','First Surgeon','Actual Duration','Listing Duration','Predicted Duration'] # rename columns like this#Getting options for the filtersprocedure_code_options = sorted(full_data['Procedure.Code'].unique())surgeon_in_charge_id_options = sorted(full_data['Consultant.In.Charge.Staff.Id'].unique())case_id_options = sorted(full_data['Case.No'].unique())#######################################   Functions to Create Components   ################################################### Function to create line graph ################def createGraph(filtered_data):    actual_duration = go.Scatter(        x=filtered_data['Start.Time'],        y=filtered_data['Actual.Duration'],        name='Actual',        # text = 'Actual: ',        mode='lines+markers',  # 'lines+markers','markers','lines'        marker=dict(size=5,                    # line= dict(width=1),                    color=('#1A3C8D'),                    # opacity= 0.3                    )    )    listing_duration = go.Scatter(        x=filtered_data['Start.Time'],        y=filtered_data['Listing.Duration'],        name='Listing',        mode='lines+markers',  # 'lines+markers','markers','lines'        marker=dict(size=5,                    # line= dict(width=1),                    color=('#778899'),                    # opacity= 0.3                    )    )    predicted_duration = go.Scatter(        x=filtered_data['Start.Time'],        y=filtered_data['Predicted.Duration'],        name='Prediction',        mode='lines+markers',  # 'lines+markers','markers','lines'        marker=dict(size=5,                    # line= dict(width=1),                    color=('#FF5A5A'),                    # opacity= 0.3                    )    )    ma_duration = go.Scatter(        x=filtered_data['Start.Time'],        y=filtered_data['Moving.Average'],        name='Moving Avg',        mode='lines+markers',  # 'lines+markers','markers','lines'        marker=dict(size=5,                    # line= dict(width=1),                    color=('#66CDAA'),                    # opacity= 0.3                    )    )    ma_duration_upper = go.Scatter(        x=filtered_data['Start.Time'],        y=filtered_data['Upper.Bound'], #y=filtered_data['Moving.Average.Upper'], for dummy dataset        name='Upper Bound', #name='M.A. (80%)', for dummy dataset        # legendgroup = 'Moving Average',        line=dict(            color=('#66CDAA'),            width=0.5,            dash='dot')    )    ma_duration_lower = go.Scatter(        x=filtered_data['Start.Time'],        y=filtered_data['Lower.Bound'], #y=filtered_data['Moving.Average.Lower'], for dummy dataset        name='Lower Bound', #name='M.A. (120%)', for dummy dataset        # legendgroup = 'Moving Average',        line=dict(            color=('#66CDAA'),            width=0.5,            dash='dot')    )    data_dummy = [ma_duration, ma_duration_upper, ma_duration_lower, listing_duration, actual_duration, predicted_duration]    # title = '<b>Historical Surgeries</b>',    layout_line = dict(        # titlefont = {"size": 16},        xaxis=dict(showticklabels=True,  # False                   autorange=True,                   # you can only change the selected range highlight color, default is white, comment "bgcolor" for default                   # the unselected range in the graph will always be DARKER, no field to customize                   # https://plot.ly/javascript/reference/#layout-xaxis-rangeslider                   rangeslider={"autorange": True, "bgcolor": "#FFF9E1"},                   rangeselector=dict(                       buttons=list([                           dict(label='3M',                                count=3,                                step='month',                                stepmode='backward'),                           dict(label='6M',                                count=6,                                step='month',                                stepmode='backward'),                           dict(step='all')                       ]),                       bgcolor= "#FFE3BD", # this is for the "unselected" 3M 6M ALL buttons, comment for default                       activecolor= "#D8AD1E", # this is for the "selected" 3M 6M ALL buttons                   ),                   type="date"),        yaxis=dict(title='Surgical Duration (min)',                   anchor="x",                   autorange=True,                   linecolor="#1e1f26",                   showline=True,                   tickfont=dict(color="#3c2f2f"),                   tickmode="auto",                   ticks="",                   titlefont={"color": "#4a4e4d"},  # "family": 'Courier New, monospace',"size": 18,                   type="linear",                   zeroline=False),        legend=dict(orientation="h", y=-0.4, x=0),  # shift legend to be below to not cover range slider        height=400,        margin={'l': 50, 'b': 20, 't': 0, 'r': 5}    )    return ({'data': data_dummy, 'layout': layout_line})image_filename = './assets/Singhealth-logo.png'encoded_image = base64.b64encode(open(image_filename, 'rb').read())###################   App Layout   ###################app.layout = html.Div(    html.Div([        html.Div(id='filtered_dataset', style={'display': 'none'}),#to store filtered data        html.Div(id='filtered_dataset_procedure_only', style={'display': 'none'}),#for visualization and slider        html.Div([            html.Img(src='data:image/png; base64, {}'.format(encoded_image.decode()),                     style={                         'height': 120,                         'width': 180,                         'float': 'right',                         'position': 'relative',                         'padding-top': 15,                         'padding-right': 25                     },                     ),            html.H2(children='SingHealth Dashboard',                    className="nine columns",                    style={                       'textAlign': 'left',                       'fontWeight': 300,                       'fontSize': 50,                       'marginLeft': '1%',                     }                     ),        ], className="row"),        html.Div([            # user input 1            html.Div([                html.P('Procedure Code',                       className="gs-header gs-table-header padded rcorners",                       style={                           'textAlign': 'center',                           'fontWeight': 600,                           'fontSize': 15,                           'marginLeft': '5px',                       }),                dcc.Dropdown(                    id='procedure_code_filter',                    options=[{'label': i, 'value': i} for i in procedure_code_options],                    value='',                    style={'fontSize': 14,                           'marginLeft': '5px',                           'marginRight': '5px',                           }                )            ],                className='two columns',                style={'margin-bottom': '1%'}            ),            # user input 2            html.Div([                html.P('Consultant-In-Charge ID',                       className="gs-header gs-table-header padded rcorners",                       style={                           'textAlign': 'center',                           'fontWeight': 600,                           'fontSize': 15,                           'marginLeft': '10px',                       }),                dcc.Dropdown(                    id='surgeon_in_charge_filter',                    options=[{'label': i, 'value': i} for i in surgeon_in_charge_id_options],                    value='',                    style={'fontSize': 14,                           'marginLeft': '5px',                           'marginRight': '5px',                           }                ),            ],                className='two columns',                style={'margin-bottom': '1%'}            ),            # user input 3            html.Div([                html.P('Case Number',                       className="gs-header gs-table-header padded rcorners",                       style={                           'textAlign': 'center',                           'fontWeight': 600,                           'fontSize': 15,                           'marginLeft': '5px',                       }),                dcc.Dropdown(                    id='case_number_filter',                    options=[{'label': i, 'value': i} for i in case_id_options],                    value='',                    style={'fontSize': 14,                           'marginLeft': '3px',                           'marginRight': '5px',                           }                ),            ],                className='two columns',                style={'margin-bottom': '1%'}            ),            html.Div([                html.Div([                    html.P('Procedure Description',                           className="gs-header gs-table-header padded rcorners",                           style={                               'marginRight': '5px',                               'textAlign': 'center',                               'fontWeight': 600,                               'fontSize': 15                           }),                    html.Br(),                    html.Div(                        id='procedure_description',                        style={'fontSize': 13,                               'textAlign': 'center',                               'marginLeft': '50px',                               'marginRight': '10px',                               'margin-Top': '45px',                               }                    ),                ]),            ],                className='six columns',                style={'margin-bottom': '1%'}            ),        ], className="row"),        html.Div([            html.Div([                # Left Chunk                html.Div([                    #Patient                    html.Div([                        html.P('Patient',                               className="gs-header gs-table-header padded rcorners",                               style={                                   'textAlign': 'center',                                   'fontWeight': 600,                                   'fontSize': 15                               }                               ),                        html.Br(),                        html.Div([                            html.Br(),                            html.P('Age',                                   style={                                       'display': 'inline-block',                                       'width': 120,                                       'textAlign': 'center',                                       'fontSize': 13,                                       'fontWeight': 600                                   }                                   ),                            html.Div(                                id='patient_age',                                style={'fontSize': 15,                                       'margin-top': '-7px',                                       'textAlign': 'center',                                       'width': 120,                                       }                            ),                            html.Br(),                            html.P('Gender',                                   style={                                       'display': 'inline-block',                                       'width': 120,                                       'textAlign': 'center',                                       'fontSize': 13,                                       'fontWeight': 600                                   }),                            html.Div(                                id='patient_gender',                                style={'fontSize': 15,                                       'margin-top': '-7px',                                       'textAlign': 'center',                                       'width': 120,                                       }                            ),                            html.Br(),                            html.P('Race',                                   style={                                       'display': 'inline-block',                                       'width': 120,                                       'textAlign': 'center',                                       'fontSize': 13,                                       'fontWeight': 600                                   }),                            html.Div(                                id='patient_race',                                style={'fontSize': 15,                                       'margin-top': '-7px',                                       'textAlign': 'center',                                       'width': 120,                                       }                            ),                            html.Br(),                        ],                            className='four columns',                        ),                        html.Div([                            html.Br(),                            html.P('ASA Status',                                   style={                                       'display': 'inline-block',                                       'width': 120,                                       'textAlign': 'center',                                       'fontSize': 13,                                       'fontWeight': 600                                   }),                            html.Div(                                id='patient_asa_status',                                style={'fontSize': 15,                                       'textAlign': 'center',                                       'width': 120,                                       'margin-top': '-7px',                                       }                            ),                            html.Br(),                            html.P('Op History',                                   style={                                       'display': 'inline-block',                                       'width': 120,                                       'textAlign': 'center',                                       'fontSize': 13,                                       'fontWeight': 600                                   }),                            html.Div(                                id='patient_op_history',                                style={'fontSize': 15,                                       'margin-top': '-7px',                                       'textAlign': 'center',                                       'width': 120,                                       }                            ),                            html.Br(),                            html.P('Type',                                   style={                                       'display': 'inline-block',                                       'width': 120,                                       'textAlign': 'center',                                       'fontSize': 13,                                       'fontWeight': 600                                   }),                            html.Div(                                id='patient_type',                                style={'fontSize': 15,                                       'margin-top': '-7px',                                       'textAlign': 'center',                                       'width': 120,                                       }                            ),                            html.Br(),                        ],                            className='four columns',                        ),                        html.Div([                            html.Br(),                            html.P('Priority',                                   style={                                       'width': 120,                                       'textAlign': 'center',                                       'fontSize': 13,                                       'fontWeight': 600,                                       'display': 'inline-block'                                   }),                            html.Div(                                id='patient_priority',                                style={'fontSize': 15,                                       'margin-top': '-7px',                                       'textAlign': 'center',                                       'width': 120,                                       }                            ),                            html.Br(),                            html.P('Op Risk',                                   style={                                       'width': 120,                                       'textAlign': 'center',                                       'fontSize': 13,                                       'fontWeight': 600,                                       'display': 'inline-block'                                   }),                            html.Div(                                id='patient_op_risk',                                style={'fontSize': 15,                                       'margin-top': '-7px',                                       'textAlign': 'center',                                       'width': 120,                                       }                            ),                            html.Br(),                            html.P('Method',                                   style={                                       'width': 120,                                       'textAlign': 'center',                                       'fontSize': 13,                                       'fontWeight': 600,                                       'display': 'inline-block'                                   }),                            html.Div(                                id='patient_method',                                style={'fontSize': 15,                                       'margin-top': '-7px',                                       'textAlign': 'center',                                       'width': 120,                                       }                            ),                            html.Br(),                        ],                            className='three columns',                        ),                    ],                        className='six columns',                        style={'fontSize': 10,                               'marginLeft': '5px',                               'marginRight': '2%'                               }                    ),                    # Surgeon                    html.Div([                        html.P('Surgeon',                               className="gs-header gs-table-header padded rcorners",                               style={                                   'textAlign': 'center',                                   'fontWeight': 600,                                   'fontSize': 15,                                   'marginLeft': '5px'                               }                               ),                        html.Br(),                        html.Div([                            html.Br(),                            html.P('Title',                                   style={                                       'textAlign': 'center',                                       'fontSize': 13,                                       'fontWeight': 600,                                       'marginLeft': '8px'                                   }                                   ),                            html.Div(                                id='first_surgeon_title',                                style={'fontSize': 15,                                       'margin-top': '-7px',                                       'textAlign': 'center',                                       }                            ),                        ],),                        html.Br(),                        html.Div([                            html.P('Department',                                   style={                                       'textAlign': 'center',                                       'fontSize': 13,                                       'fontWeight': 600,                                       'marginLeft': '8px'                                   }),                            html.Div(                                id='first_surgeon_dept',                                style={'fontSize': 15,                                       'margin-top': '-7px',                                       'textAlign': 'center',                                       }                            ),                        ],                        ),                        html.Br(),                        html.Div([                            html.P('Staff ID',                                   style={                                       'textAlign': 'center',                                       'fontSize': 13,                                       'fontWeight': 600,                                       'marginLeft': '8px'                                   }),                            html.Div(                                id='first_surgeon_id',                                style={'fontSize': 15,                                       'margin-top': '-7px',                                       'textAlign': 'center',                                       }                            ),                        ],                        ),                    ],                        className='three columns',                        style={'fontSize': 10,                               'marginRight': '2%'                               }                    ),                    # Anaesthetist                    html.Div([                        html.P('Anaesthetist',                               className="gs-header gs-table-header padded rcorners",                               style={                                   'textAlign': 'center',                                   'fontWeight': 600,                                   'fontSize': 15,                                   'marginLeft': '5px'}                               ),                        html.Br(),                        html.Div([                            html.Br(),                            html.P('Title',                                   style={                                       'textAlign': 'center',                                       'fontSize': 13,                                       'fontWeight': 600,                                       'marginLeft': '8px',                                       'margin-Bottom': '10px'                                   }),                        ],                        ),                        html.Div(                            id='principal_anaesthetist_title',                            style={'fontSize': 15,                                    'margin-top': '-7px',                                    'textAlign': 'center',                                   }                        ),                        html.Br(),                        html.Div([                            html.P('Staff ID',                                   style={                                       'textAlign': 'center',                                       'fontSize': 13,                                       'fontWeight': 600,                                       'marginLeft': '8px',                                       'margin-Bottom': '10px'                                   }),                        ],                        ),                        html.Div(                            id='principal_anaesthetist_id',                            style={'fontSize': 15,                                    'margin-top': '-7px',                                    'textAlign': 'center',                                   }                        ),                        html.Br(),                        html.Div([                            html.P('Primary', #Anaesthetist                                   style={                                       'textAlign': 'center',                                       'fontSize': 13,                                       'fontWeight': 600,                                       'marginLeft': '8px'                                   }),                        ],                        ),                        html.Div(                            id='principal_anaesthetist_primary',                            style={'fontSize': 15,                                    'margin-top': '-7px',                                    'textAlign': 'center',                                   }                        ),                    ],                        className='three columns',                        style={'fontSize': 10,                               }                    ),                ], className='six columns',                ),                # Right Chunk                html.Div([                    html.P('Prediction Visualisation',                           className="gs-header gs-table-header padded rcorners",                           style={                               'marginRight': '5px',                               'marginBottom': '60px',                               'textAlign': 'center',                               'fontWeight': 600,                               'fontSize': 15,                           }),                    html.Div([                        html.Br(),                        # Allowed arguments: className, color, disabled,                        # dots, handleLabel, id, included, marks, max, min,                        # size, step, targets, theme, updatemode, value, vertical                        html.Div(daq.Slider(                            id='prediction_visualization',                            size=550,  # control the length of the slider                            value='',                            color="#e55316",                            # theme="dark",                            marks={},                            targets={},                            handleLabel={"showCurrentValue": True, "label": "Prediction"},                            disabled=True,  # prevent movement                        ), style={                            # "display": "flex",                            "fontSize": 15,                            "justify-content": "center",                            "align-items": "center",                                "marginTop": "-35px",                            "marginBottom": "25px",                            "marginLeft": "10%"                        }),                        #removed section                    ],                        className='nine columns'                    ),                    html.Div([                        html.Div([                            html.P('Actual Duration',                                   className="gs-header gs-text-header padded rcorners",                                   style={                                       'display': 'inline-block',                                       'width': 150,                                       'textAlign': 'Center',                                       'fontSize': 12,                                       'fontWeight': 400,                                       'margin-Bottom': '5px'                                   }),                            html.Div(                                id='prediction_visualization_actual',                                style={'fontSize': 13,                                       'textAlign': 'center',                                       'width': 150,                                       'margin-top': '5px',                                       }                            ),                        ],                            className='two columns',                            style={'margin-bottom': '1%'}                        ),                        html.Div([                            html.P('Listing Duration',                                   className="gs-header gs-text-header padded rcorners",                                   style={                                       'display': 'inline-block',                                       'width': 150,                                       'textAlign': 'Center',                                       'fontSize': 12,                                       'fontWeight': 400,                                       'marginLeft': '80%',                                       #'marginRight': '40%',                                       'margin-Bottom': '5px'                                   }),                            html.Div(                                id='prediction_visualization_listing',                                style={'fontSize': 13,                                       'textAlign': 'center',                                       'width': 150,                                       'margin-top': '5px',                                       'marginLeft': '80%',                                       }                            ),                        ],                            className='three columns',                            style={'margin-bottom': '1%'}                        ),                        html.Div([                            html.P('Moving Average',                                   className="gs-header gs-text-header padded rcorners",                                   style={                                       'display': 'inline-block',                                       'width': 150,                                       'textAlign': 'Center',                                       'fontSize': 12,                                       'fontWeight': 400,                                       # 'marginRight': '40%',                                       'marginLeft': '130%'                                   }),                            html.Div(                                id='prediction_visualization_ma',                                style={'fontSize': 13,                                       'textAlign': 'center',                                       'width': 150,                                       'margin-top': '5px',                                       'marginLeft': '130%',                                       }                            ),                        ],                            className='three columns',                            style={'margin-bottom': '1%'}                        ),                        html.Div([                            html.P('Model Prediction',                                   className="gs-header gs-text-header padded rcorners",                                   style={                                       'display': 'inline-block',                                       'width': 150,                                       'textAlign': 'Center',                                       'fontSize': 12,                                       'fontWeight': 400,                                       # 'marginRight': '40%',                                       'marginLeft': '180%'                                   }),                            html.Div(                                id='prediction_visualization_pred',                                style={'fontSize': 13,                                       'textAlign': 'center',                                       'width': 150,                                       'margin-top': '5px',                                       'marginLeft': '180%',                                       }                            ),                        ],                            className='three columns',                            style={'margin-bottom': '1%'}                        ),                    ],                        className='nine columns'                    ),                    html.Div([                        html.Div([                            html.P('Mean',                                   className="gs-header gs-text-header padded rcorners",                                   style={                                       'display': 'inline-block',                                       'width': 150,                                       'textAlign': 'Center',                                       'fontSize': 12,                                       'fontWeight': 400,                                       'margin-Bottom': '5px'                                   }),                            html.Div(                                id='prediction_visualization_mean',                                style={'fontSize': 13,                                       'textAlign': 'center',                                       'width': 150,                                       'margin-top': '5px',                                       'margin-bottom': '5px',                                       }                            ),                        ],                            className='two columns',                            style={'margin-bottom': '1%'}                        ),                        html.Div([                            html.P('Standard Deviation',                                   className="gs-header gs-text-header padded rcorners",                                   style={                                       'display': 'inline-block',                                       'width': 150,                                       'textAlign': 'Center',                                       'fontSize': 12,                                       'fontWeight': 400,                                       'marginLeft': '80%',                                       # 'marginRight': '40%',                                       'margin-Bottom': '5px'                                   }),                            html.Div(                                id='prediction_visualization_sd',                                style={'fontSize': 13,                                       'textAlign': 'center',                                       'width': 150,                                       'margin-top': '5px',                                       'marginLeft': '80%',                                       'margin-bottom': '5px',                                       }                            ),                        ],                            className='three columns',                            style={'margin-bottom': '1%'}                        ),                        html.Div([                            html.P('10th Percentile',                                   className="gs-header gs-text-header padded rcorners",                                   style={                                       'display': 'inline-block',                                       'width': 150,                                       'textAlign': 'Center',                                       'fontSize': 12,                                       'fontWeight': 400,                                       # 'marginRight': '40%',                                       'marginLeft': '130%',                                       'margin-bottom': '5px',                                   }),                            html.Div(                                id='prediction_visualization_10th',                                style={'fontSize': 13,                                       'textAlign': 'center',                                       'width': 150,                                       'margin-top': '5px',                                       'marginLeft': '130%',                                       'margin-bottom': '5px',                                       }                            ),                        ],                            className='three columns',                            style={'margin-bottom': '1%'}                        ),                        html.Div([                            html.P('90th Percentile',                                   className="gs-header gs-text-header padded rcorners",                                   style={                                       'display': 'inline-block',                                       'width': 150,                                       'textAlign': 'Center',                                       'fontSize': 12,                                       'fontWeight': 400,                                       # 'marginRight': '40%',                                       'marginLeft': '180%',                                       'margin-bottom': '5px',                                   }),                            html.Div(                                id='prediction_visualization_90th',                                style={'fontSize': 13,                                       'textAlign': 'center',                                       'width': 150,                                       'margin-top': '5px',                                       'margin-bottom': '5px',                                       'marginLeft': '180%',                                       }                            ),                        ],                            className='three columns',                            style={'margin-bottom': '1%'}                        ),                    ],                        className='nine columns'                    ),                ],                    className='six columns',                ),            ]),        ], className="row"),        # Prediction Summary output        html.Div([            html.Div([                html.P('Prediction Summary',                       className="gs-header gs-table-header padded rcorners",                       style={                           'marginLeft': '1%',                           'textAlign': 'center',                           'fontWeight': 600,                           'fontSize': 15}                       ),                html.Div([                    html.Br(),                    html.Br(),                    html.P('Case Number',                           style={                               'textAlign': 'center',                               'fontSize': 15,                               'fontWeight': 600,                               'marginLeft': '18%'                           }),                    html.Div(                        id='prediction_case_number',                        style={'fontSize': 15,                               'margin-top': '-7px',                               'textAlign': 'center',                               'marginLeft': '18%',                               }                    ),                ],                    className='three columns',                ),                html.Div([                    html.Br(),                    html.Br(),                    html.P('Procedure Code',                           style={                               'textAlign': 'center',                               'marginLeft': '18%',                               'fontSize': 15,                               'fontWeight': 600,                           }),                    html.Div(                        id='prediction_procedure_code',                        style={'fontSize': 15,                               'margin-top': '-7px',                               'textAlign': 'center',                               'marginLeft': '18%',                               }                    ),                ],                    className='three columns',                ),                html.Div([                    html.Br(),                    html.Br(),                    html.P('M.A. Prediction',                           style={                               'textAlign': 'center',                               'fontSize': 15,                               'fontWeight': 600,                               'marginLeft': '18%',                           }),                    html.Div(                        id='prediction_moving_average',                        style={'fontSize': 15,                               'margin-top': '-7px',                               'textAlign': 'center',                               'marginLeft': '20%',                               }                    ),                ],                    className='three columns',                ),                html.Div([                    html.Br(),                    html.Br(),                    html.P('Model Prediction',                           style={                               'textAlign': 'center',                               'fontSize': 15,                               'fontWeight': 600,                               'marginLeft': '18%',                           }),                    html.Div(                        id='prediction_model_prediction',                        style={'fontSize': 15,                               'margin-top': '-7px',                               'textAlign': 'center',                               'marginLeft': '18%',                               }                    ),                ],                    className='three columns',                ),            ], className="six columns",                style={                    'fontSize': 12,                    'margin-bottom': '10px'                }            ),            html.Div([                html.P('Duration Slider',                       className="gs-header gs-table-header padded rcorners",                       style={                           'marginRight': '5px',                           'textAlign': 'center',                           'fontWeight': 600,                           'fontSize': 15}                       ),                # Duration Slider                html.Br(),                html.Div(dcc.RangeSlider(                    id='duration_range_slider',                    # in callback                    # min   minimum of slider range                    # max   maximum of slider range                    # value   initialized selected range start and end                    # marks                    step=1,                    dots=False,  # dot for each value                    allowCross=False,  # prevent selection "dots" from "crossing"                    # updatemode='drag', #to update values AS you are dragging, i.e. even without releasing                ),                    style={                        'margin-top': "5px",                        'marginLeft': "5%",                        'marginRight': "5%",                    }                ),                # Duration Slider Description                html.Div([                    html.Div(id='output_duration_range_slider',                             style={                                 'marginTop': '5%',                                 'marginLeft': '5%',                                 'marginRight': '5%',                                 'marginBottom': '3%',                                 'display': 'inline-block'                             }),                ]),            ], className="six columns")        ], className="row"),        html.Div([            # Historical Records Dash Table            html.Div([                #header                html.P('Historical Surgeries',                       className="gs-header gs-table-header padded rcorners",                       style={                           'marginLeft': '1%',                           'textAlign': 'center',                           'fontWeight': 600,                           'fontSize': 15}                       ),                html.Br(),                #table                dash_table.DataTable(                    id='surgery_table',                    data=table_data.to_dict('rows'),                    sorting=True,                    columns=[{'name': i, 'id': i} for i in table_data.columns],                    style_cell_conditional=[                                               {                                                   'if': {'row_index': 'odd'},                                                   'backgroundColor': '#bababa'                                               }                                           ],                    style_header={                        'backgroundColor': '#bababa',                        'fontWeight': 'bold',                        'font-family': "Quicksand",                    },                    style_table={                        'maxHeight': '380',                        'overflowY': 'scroll',                        'border': 'solid black',                        'border-width': '0.2px',                        'marginLeft': '0.5%',                    },                    # style_data_conditional=[{                    #     "if": {"row_index": 4},                    #     "backgroundColor": "#3D9970",                    #     'color': 'white'                    # }],                ),            ],                className='six columns',            ),            html.Div([                html.P('Historical Duration',                       className="gs-header gs-table-header padded rcorners",                       style={                           'marginRight': '5px',                           'textAlign': 'center',                           'fontWeight': 600,                           'fontSize': 15                       }),                html.Br(),                dcc.Graph(                    id='surgery_line_graph',                    #in callback                    #figure={                        #'data': data_dummy,                        #'layout': layout_line,                    #}                ),                html.Br(),                html.Br(),            ], className='six columns',                style={                    'marginLeft': '5px',                }            ),        ], className="row")    ]))###############################   Callbacks/ Data Update   ########################################################### Filters ###################################Callback from procedure_code_filter to update surgeon_in_charge_filter@app.callback(    Output('surgeon_in_charge_filter', 'options'),    [Input('procedure_code_filter', 'value')])def filter_surgeon_by_procedure(procedure_code):    filtered_data = full_data[full_data['Procedure.Code'] == procedure_code]    surgeon_in_charge_id_options = sorted(filtered_data['Consultant.In.Charge.Staff.Id'].unique())    new_options = [{'label': i, 'value': i} for i in surgeon_in_charge_id_options]    return new_options@app.callback(Output('surgeon_in_charge_filter', 'value'), [Input('surgeon_in_charge_filter', 'options')])def reset(value):    return ""@app.callback(Output('procedure_code_filter', 'value'), [Input('procedure_code_filter', 'options')])def reset(value):    return ""#Callback from procedure_code_filter AND possibly surgeon_in_charge_filter to filter data@app.callback(    Output('filtered_dataset', 'children'),    [Input('procedure_code_filter', 'value'),     Input('surgeon_in_charge_filter', 'value'),])def filter_data(procedure_code, surgeon_id):    if (surgeon_id == ''):        filtered_data = full_data[full_data['Procedure.Code'] == procedure_code]    else:        filtered_data = full_data[full_data['Procedure.Code'] == procedure_code]        filtered_data = filtered_data[filtered_data['Consultant.In.Charge.Staff.Id'] == surgeon_id]    return filtered_data.to_json(date_format='iso', orient='split')#Callback from procedure_code_filter to update case_number_filter@app.callback(    Output('case_number_filter', 'options'),    [Input('filtered_dataset', 'children')])def filter_surgeon_by_procedure(jsonified_filtered_data):    filtered_data = pd.read_json(jsonified_filtered_data, orient='split')    case_id_options = sorted(filtered_data['Case.No'].unique())    #surgeon_in_charge_id_options = sorted(filtered_data['Consultant.In.Charge.Staff.Id'].unique())    new_options = [{'label': i, 'value': i} for i in case_id_options]    return new_options#Callback from procedure_code_filter ONLY to filter data@app.callback(    Output('filtered_dataset_procedure_only', 'children'),    [Input('procedure_code_filter', 'value'),])def filter_data(procedure_code):    filtered_data = full_data[full_data['Procedure.Code'] == procedure_code]    return filtered_data.to_json(date_format='iso', orient='split')#NEW#2 way, update procedure filter options by selecting surgeon/ consultant in charge#try uncommenting and run, there will be an error 'Error loading dependencies', such that the dashboard doesn't even load# i.e. can't work/ have both at same time'''@app.callback(    Output('procedure_code_filter', 'options'),    [Input('surgeon_in_charge_filter', 'value')])def filter_procedure_by_surgeon(surgeon_id):    filtered_data = full_data[full_data['Consultant.In.Charge.Staff.Id'] == surgeon_id]    procedure_options = sorted(filtered_data['Procedure.Code'].unique())    new_options = [{'label': i, 'value': i} for i in procedure_options]    return new_options'''#NEW#2 way, update procedure filter options by selecting specific case id#try uncommenting and run, you will find that now all the filters have no options# i.e. can't work/ have both at same time'''@app.callback(    Output('procedure_code_filter', 'options'),    [Input('case_number_filter', 'value')])def filter_procedure_by_case(case_id):    filtered_data = full_data[full_data['Case.No'] == case_id]    procedure_options = sorted(filtered_data['Procedure.Code'].unique())    new_options = [{'label': i, 'value': i} for i in procedure_options]    return new_options'''############################ Table ##################################@app.callback(    Output('surgery_table', 'data'),    [Input('filtered_dataset', 'children')])def update_table(jsonified_filtered_data):    filtered_data = pd.read_json(jsonified_filtered_data, orient='split')    table_columns = ['Procedure.Code','Case.No','Consultant.In.Charge.Staff.Id','First.Surgeon.Title','Actual.Duration','Listing.Duration','Predicted.Duration'] # choose columns, SAME as start, order matters    table_data = filtered_data[table_columns]    table_data.columns = ['Code','Case No.','Consultant In Charge','First Surgeon','Actual Duration','Listing Duration','Predicted Duration'] # rename columns like this    return (table_data.to_dict('rows'))############################ Graph ##################################@app.callback(    Output('surgery_line_graph', 'figure'),    [Input('filtered_dataset', 'children')])def update_graph(jsonified_filtered_data):    filtered_data = pd.read_json(jsonified_filtered_data, orient='split')    filtered_graph_figure = createGraph(filtered_data)    return filtered_graph_figure############################ Prediction Visualization ##################################@app.callback(    Output('prediction_visualization', 'min'),    [Input('filtered_dataset_procedure_only', 'children')])def update_visualization_min(jsonified_filtered_data):    filtered_data = pd.read_json(jsonified_filtered_data, orient='split')    filtered_data_min_actual = int(filtered_data["Actual.Duration"].min())    filtered_data_min_pred = int(filtered_data["Predicted.Duration"].min())    return min(filtered_data_min_actual,filtered_data_min_pred)@app.callback(    Output('prediction_visualization', 'max'),    [Input('filtered_dataset_procedure_only', 'children')])def update_visualization_max(jsonified_filtered_data):    filtered_data = pd.read_json(jsonified_filtered_data, orient='split')    filtered_data_max_actual = int(filtered_data["Actual.Duration"].max())    filtered_data_max_pred = int(filtered_data["Predicted.Duration"].max())    return max(filtered_data_max_actual,filtered_data_max_pred)@app.callback(    Output('prediction_visualization', 'value'),    [Input('case_number_filter', 'value'),     Input('filtered_dataset', 'children'),])def update_visualization_prediction(case_id, jsonified_filtered_data):    filtered_data = pd.read_json(jsonified_filtered_data, orient='split')    prediction = filtered_data.loc[filtered_data['Case.No'] == case_id]['Predicted.Duration'].unique()[0]    return '{}'.format("{0:0.1f}".format(prediction)) # OR (round(prediction, 1))@app.callback(    Output('prediction_visualization', 'marks'),    [Input('case_number_filter', 'value'),     Input('filtered_dataset_procedure_only', 'children'),])def update_slider_min(case_id, jsonified_filtered_data):    filtered_data = pd.read_json(jsonified_filtered_data, orient='split')    #filtered_data_min = int(filtered_data["Actual.Duration"].min())    #filtered_data_max = int(filtered_data["Actual.Duration"].max())    moving_average = filtered_data.loc[filtered_data['Case.No'] == case_id]['Moving.Average'].unique()[0]    listing = filtered_data.loc[filtered_data['Case.No'] == case_id]['Listing.Duration'].unique()[0]    actual = filtered_data.loc[filtered_data['Case.No'] == case_id]['Actual.Duration'].unique()[0]    #actual_duration = filtered_data['Actual.Duration'].tolist()    #pct_10 = np.percentile(actual_duration, 10)    #pct_90 = np.percentile(actual_duration, 90)    #marks = [moving_average, pct_10, pct_90]    #{marks[0]: {"showCurrentValue":True,"label":"Moving Average","color":"#685"},    m = str(moving_average)    l = str(listing)    a = str(actual)    formatted_marks={            m: 'M.A.: {}'.format("{0:0.1f}".format(moving_average)), #moving average, there will be overlaps            l: 'Listing: {}'.format("{0:0.1f}".format(listing)), #listing, there will be overlaps            a: 'Actual: {}'.format("{0:0.1f}".format(actual)), #actual, there will be overlaps    }    return formatted_marks'''####### NEW slider ########@app.callback(    Output('prediction_visualization_slider', 'min'),    [Input('case_number_filter', 'value'),     Input('filtered_dataset_procedure_only', 'children'),])def predSliderMin(case_id, jsonified_filtered_data):    filtered_data = pd.read_json(jsonified_filtered_data, orient='split')    filtered_data_min = int(filtered_data["Actual.Duration"].min())    return filtered_data_min@app.callback(    Output('prediction_visualization_slider', 'max'),    [Input('case_number_filter', 'value'),     Input('filtered_dataset_procedure_only', 'children'),])def predSliderMax(case_id, jsonified_filtered_data):    filtered_data = pd.read_json(jsonified_filtered_data, orient='split')    filtered_data_max = int(filtered_data["Actual.Duration"].max())    return filtered_data_max@app.callback(    Output('prediction_visualization_slider', 'value'),    [Input('case_number_filter', 'value'),     Input('filtered_dataset_procedure_only', 'children'),])def update_slider_range(case_id, jsonified_filtered_data):    filtered_data = pd.read_json(jsonified_filtered_data, orient='split')    #filtered_data_min = int(filtered_data["Actual.Duration"].min())    #filtered_data_max = int(filtered_data["Actual.Duration"].max())    #return ([filtered_data_min,filtered_data_max])    prediction = filtered_data.loc[filtered_data['Case.No'] == case_id]['Predicted.Duration'].unique()[0]    lower = round(prediction*0.8,1)    upper = round(prediction*1.2,1)    return ([lower,upper])    @app.callback(    Output('prediction_visualization_slider', 'marks'),    [Input('case_number_filter', 'value'),     Input('filtered_dataset_procedure_only', 'children'),])def update_slider_range(case_id, jsonified_filtered_data):    filtered_data = pd.read_json(jsonified_filtered_data, orient='split')    filtered_data_min = int(filtered_data["Actual.Duration"].min())    filtered_data_max = int(filtered_data["Actual.Duration"].max())    actual_durations = filtered_data['Actual.Duration'].tolist()    pct_25 = str(round(np.percentile(actual_durations, 25),1))    pct_50 = str(round(np.percentile(actual_durations, 50),1))    pct_75 = str(round(np.percentile(actual_durations, 75),1))    actual = filtered_data.loc[filtered_data['Case.No'] == case_id]['Actual.Duration'].unique()[0]    listing = filtered_data.loc[filtered_data['Case.No'] == case_id]['Listing.Duration'].unique()[0]    moving_average = filtered_data.loc[filtered_data['Case.No'] == case_id]['Moving.Average'].unique()[0]    prediction = filtered_data.loc[filtered_data['Case.No'] == case_id]['Predicted.Duration'].unique()[0]        #creating linear range of slider values, from min to max, integer, stepsize of 1    filtered_data_slider_values = np.arange(filtered_data_min,filtered_data_max+1,1).tolist()    #creating 5 marks/ ticks for the slider    filtered_data_slider_mark_values = np.linspace(filtered_data_min,filtered_data_max,5,dtype = int, endpoint=True).tolist()    formatted_marks={filtered_data_slider_mark_values[0]: {'label': 'min: {}'.format(str(filtered_data_slider_mark_values[0])), 'style': {'color': '#f50'}},                     filtered_data_slider_mark_values[1]: {'label': '25th%: {}'.format(pct_25)}, #str(filtered_data_slider_mark_values[1])                     filtered_data_slider_mark_values[2]: {'label': '50th%: {}'.format(pct_50)}, #str(filtered_data_slider_mark_values[2])                     filtered_data_slider_mark_values[3]: {'label': '75th%: {}'.format(pct_75)}, #str(filtered_data_slider_mark_values[3])                     filtered_data_slider_mark_values[4]: {'label': 'max: {}'.format(str(filtered_data_slider_mark_values[4])), 'style': {'color': '#77b0b1'}}                     }    return formatted_marks'''####### Text information #######@app.callback(    Output('prediction_visualization_mean', 'children'),    [Input('case_number_filter', 'value'),     Input('filtered_dataset_procedure_only', 'children'),])def getMean(case_id, jsonified_filtered_data):    filtered_data = pd.read_json(jsonified_filtered_data, orient='split')    actual_duration = filtered_data['Actual.Duration'].tolist()    mean = np.mean(actual_duration)    return '{}'.format("{0:0.1f}".format(mean))    @app.callback(    Output('prediction_visualization_sd', 'children'),    [Input('case_number_filter', 'value'),     Input('filtered_dataset_procedure_only', 'children'),])def getSD(case_id, jsonified_filtered_data):    filtered_data = pd.read_json(jsonified_filtered_data, orient='split')    actual_duration = filtered_data['Actual.Duration'].tolist()    sd = np.std(actual_duration)    return '{}'.format("{0:0.1f}".format(sd))@app.callback(    Output('prediction_visualization_10th', 'children'),    [Input('case_number_filter', 'value'),     Input('filtered_dataset_procedure_only', 'children'),])def getPct10(case_id, jsonified_filtered_data):    filtered_data = pd.read_json(jsonified_filtered_data, orient='split')    actual_duration = filtered_data['Actual.Duration'].tolist()    pct_10 = np.percentile(actual_duration, 10)    return '{}'.format("{0:0.1f}".format(pct_10))@app.callback(    Output('prediction_visualization_90th', 'children'),    [Input('case_number_filter', 'value'),     Input('filtered_dataset_procedure_only', 'children'),])def getPct90(case_id, jsonified_filtered_data):    filtered_data = pd.read_json(jsonified_filtered_data, orient='split')    actual_duration = filtered_data['Actual.Duration'].tolist()    pct_90 = np.percentile(actual_duration, 90)    return '{}'.format("{0:0.1f}".format(pct_90))@app.callback(    Output('prediction_visualization_actual', 'children'),    [Input('case_number_filter', 'value'),     Input('filtered_dataset_procedure_only', 'children'),])def getActual(case_id, jsonified_filtered_data):    filtered_data = pd.read_json(jsonified_filtered_data, orient='split')    actual = filtered_data.loc[filtered_data['Case.No'] == case_id]['Actual.Duration'].unique()[0]    return '{}'.format("{0:0.1f}".format(actual))@app.callback(    Output('prediction_visualization_listing', 'children'),    [Input('case_number_filter', 'value'),     Input('filtered_dataset_procedure_only', 'children'),])def getListing(case_id, jsonified_filtered_data):    filtered_data = pd.read_json(jsonified_filtered_data, orient='split')    listing = filtered_data.loc[filtered_data['Case.No'] == case_id]['Listing.Duration'].unique()[0]    return '{}'.format("{0:0.1f}".format(listing))@app.callback(    Output('prediction_visualization_ma', 'children'),    [Input('case_number_filter', 'value'),     Input('filtered_dataset_procedure_only', 'children'),])def getMA(case_id, jsonified_filtered_data):    filtered_data = pd.read_json(jsonified_filtered_data, orient='split')    moving_average = filtered_data.loc[filtered_data['Case.No'] == case_id]['Moving.Average'].unique()[0]    return '{}'.format("{0:0.1f}".format(moving_average))@app.callback(    Output('prediction_visualization_pred', 'children'),    [Input('case_number_filter', 'value'),     Input('filtered_dataset_procedure_only', 'children'),])def getPrediction(case_id, jsonified_filtered_data):    filtered_data = pd.read_json(jsonified_filtered_data, orient='split')    prediction = filtered_data.loc[filtered_data['Case.No'] == case_id]['Predicted.Duration'].unique()[0]    return '{}'.format("{0:0.1f}".format(prediction))############################ Duration Slider ##################################@app.callback(    Output('duration_range_slider', 'min'),    [Input('filtered_dataset_procedure_only', 'children')])def update_slider_min(jsonified_filtered_data):    filtered_data = pd.read_json(jsonified_filtered_data, orient='split')    filtered_data_min = int(filtered_data["Actual.Duration"].min())    return filtered_data_min@app.callback(    Output('duration_range_slider', 'max'),    [Input('filtered_dataset_procedure_only', 'children')])def update_slider_max(jsonified_filtered_data):    filtered_data = pd.read_json(jsonified_filtered_data, orient='split')    filtered_data_max = int(filtered_data["Actual.Duration"].max())    return filtered_data_max@app.callback(    Output('duration_range_slider', 'value'),    [Input('case_number_filter', 'value'),     Input('filtered_dataset_procedure_only', 'children'),])def update_slider_range(case_id, jsonified_filtered_data):    filtered_data = pd.read_json(jsonified_filtered_data, orient='split')    #filtered_data_min = int(filtered_data["Actual.Duration"].min())    #filtered_data_max = int(filtered_data["Actual.Duration"].max())    #return ([filtered_data_min,filtered_data_max])    prediction = filtered_data.loc[filtered_data['Case.No'] == case_id]['Predicted.Duration'].unique()[0]    lower = round(prediction*0.8,1)    upper = round(prediction*1.2,1)    return ([lower,upper])    @app.callback(    Output('duration_range_slider', 'marks'),    [Input('filtered_dataset_procedure_only', 'children')])def update_slider_marks(jsonified_filtered_data):    filtered_data = pd.read_json(jsonified_filtered_data, orient='split')    filtered_data_min = int(filtered_data["Actual.Duration"].min())    filtered_data_max = int(filtered_data["Actual.Duration"].max())    actual_durations = filtered_data['Actual.Duration'].tolist()    pct_25 = str(round(np.percentile(actual_durations, 25),1))    pct_50 = str(round(np.percentile(actual_durations, 50),1))    pct_75 = str(round(np.percentile(actual_durations, 75),1))    #creating linear range of slider values, from min to max, integer, stepsize of 1    filtered_data_slider_values = np.arange(filtered_data_min,filtered_data_max+1,1).tolist()    #creating 5 marks/ ticks for the slider    filtered_data_slider_mark_values = np.linspace(filtered_data_min,filtered_data_max,5,dtype = int, endpoint=True).tolist()    formatted_marks={filtered_data_slider_mark_values[0]: {'label': 'min: {}'.format(str(filtered_data_slider_mark_values[0])), 'style': {'color': '#f50'}},                     filtered_data_slider_mark_values[1]: {'label': '25th%: {}'.format(pct_25)}, #str(filtered_data_slider_mark_values[1])                     filtered_data_slider_mark_values[2]: {'label': '50th%: {}'.format(pct_50)}, #str(filtered_data_slider_mark_values[2])                     filtered_data_slider_mark_values[3]: {'label': '75th%: {}'.format(pct_75)}, #str(filtered_data_slider_mark_values[3])                     filtered_data_slider_mark_values[4]: {'label': 'max: {}'.format(str(filtered_data_slider_mark_values[4])), 'style': {'color': '#77b0b1'}}                     }    return formatted_marks@app.callback(    Output('output_duration_range_slider', 'children'),    [Input('duration_range_slider', 'value'),     Input('filtered_dataset_procedure_only', 'children'),])def update_slider_textoutput(value,jsonified_filtered_data):    filtered_data = pd.read_json(jsonified_filtered_data, orient='split')    in_range = count(filtered_data["Actual.Duration"].tolist(), value[0], value[1])    filtered_data_length = len(filtered_data["Actual.Duration"])    #Uncomment for the old 1 line return statement    #return 'For the selected procedure code, {}% ({}/{}) of historical surgeries\' durations fall within your selected range of {} to {} minutes.'.format(    #    "{0:0.1f}".format(in_range/filtered_data_length*100),    #    str(in_range),    #    str(filtered_data_length),    #    str(value[0]),    #    str(value[1]),    #)    #I split this the old return statement up, don't know if it would be possible to style strings directly    a = 'For the selected procedure code, '    b = '{}%'.format("{0:0.1f}".format(in_range/filtered_data_length*100))    c = '({}/{})'.format(str(in_range), str(filtered_data_length))    d = 'of historical surgeries\' durations fall within your selected range of'    e = '{} to {} minutes'.format(str(value[0]), str(value[1]))    return a + ' ' + b + ' ' + c + ' ' + d + ' ' + edef count(duration_list, l, r):    # the if condition checks for the surgery durations that are in the range l to r    # the return is stored in a list whose length is the answer (i.e. count)    return len(list(x for x in duration_list if l <= x <= r))############################ Procedure Description ##################################@app.callback(    Output('procedure_description', 'children'),    [Input('procedure_code_filter', 'value'),     Input('filtered_dataset', 'children'),])def getProcedureDescription(procedure_code,jsonified_filtered_data):    filtered_data = pd.read_json(jsonified_filtered_data, orient='split')    description = filtered_data.loc[filtered_data['Procedure.Code'] == procedure_code]['Procedure.Description'].unique()[0]    return description############################ Patient ##################################@app.callback(    Output('patient_age', 'children'),    [Input('case_number_filter', 'value'),     Input('filtered_dataset', 'children'),])def getPatientAge(case_id,jsonified_filtered_data):    filtered_data = pd.read_json(jsonified_filtered_data, orient='split')    age = filtered_data.loc[filtered_data['Case.No'] == case_id]['Age'].unique()[0]    return str(age)@app.callback(    Output('patient_gender', 'children'),    [Input('case_number_filter', 'value'),     Input('filtered_dataset', 'children'),])def getPatientAge(case_id,jsonified_filtered_data):    filtered_data = pd.read_json(jsonified_filtered_data, orient='split')    gender = filtered_data.loc[filtered_data['Case.No'] == case_id]['Gender'].unique()[0]    return gender@app.callback(    Output('patient_race', 'children'),    [Input('case_number_filter', 'value'),     Input('filtered_dataset', 'children'),])def getPatientAge(case_id,jsonified_filtered_data):    filtered_data = pd.read_json(jsonified_filtered_data, orient='split')    race = filtered_data.loc[filtered_data['Case.No'] == case_id]['Race'].unique()[0]    return race@app.callback(    Output('patient_asa_status', 'children'),    [Input('case_number_filter', 'value'),     Input('filtered_dataset', 'children'),])def getPatientAsa(case_id,jsonified_filtered_data):    filtered_data = pd.read_json(jsonified_filtered_data, orient='split')    asa = filtered_data.loc[filtered_data['Case.No'] == case_id]['ASA.Status'].unique()[0]    return asa@app.callback(    Output('patient_op_history', 'children'),    [Input('case_number_filter', 'value'),     Input('filtered_dataset', 'children'),])def getPatientHistory(case_id,jsonified_filtered_data):    filtered_data = pd.read_json(jsonified_filtered_data, orient='split')    op_history = filtered_data.loc[filtered_data['Case.No'] == case_id]['Op.History'].unique()[0]    return op_history@app.callback(    Output('patient_type', 'children'),    [Input('case_number_filter', 'value'),     Input('filtered_dataset', 'children'),])def getPatientType(case_id,jsonified_filtered_data):    filtered_data = pd.read_json(jsonified_filtered_data, orient='split')    type = filtered_data.loc[filtered_data['Case.No'] == case_id]['Type.of.Patient'].unique()[0]    return type@app.callback(    Output('patient_priority', 'children'),    [Input('case_number_filter', 'value'),     Input('filtered_dataset', 'children'),])def getPatientPriority(case_id,jsonified_filtered_data):    filtered_data = pd.read_json(jsonified_filtered_data, orient='split')    priority = filtered_data.loc[filtered_data['Case.No'] == case_id]['Priority.of.Operation'].unique()[0]    return priority@app.callback(    Output('patient_method', 'children'),    [Input('case_number_filter', 'value'),     Input('filtered_dataset', 'children'),])def getPatientMethod(case_id,jsonified_filtered_data):    filtered_data = pd.read_json(jsonified_filtered_data, orient='split')    method = filtered_data.loc[filtered_data['Case.No'] == case_id]['Method.of.Operation'].unique()[0]    return method@app.callback(    Output('patient_op_risk', 'children'),    [Input('case_number_filter', 'value'),     Input('filtered_dataset', 'children'),])def getPatientRisk(case_id,jsonified_filtered_data):    filtered_data = pd.read_json(jsonified_filtered_data, orient='split')    risk = filtered_data.loc[filtered_data['Case.No'] == case_id]['Op.Risk'].unique()[0]    return risk############################ Surgeon ##################################@app.callback(    Output('first_surgeon_title', 'children'),    [Input('case_number_filter', 'value'),     Input('filtered_dataset', 'children'),])def getSurTitle(case_id,jsonified_filtered_data):    filtered_data = pd.read_json(jsonified_filtered_data, orient='split')    title = filtered_data.loc[filtered_data['Case.No'] == case_id]['First.Surgeon.Title'].unique()[0]    return title@app.callback(    Output('first_surgeon_dept', 'children'),    [Input('case_number_filter', 'value'),     Input('filtered_dataset', 'children'),])def getSurDept(case_id,jsonified_filtered_data):    filtered_data = pd.read_json(jsonified_filtered_data, orient='split')    dept= filtered_data.loc[filtered_data['Case.No'] == case_id]['First.Surgeon.Department.Code'].unique()[0]    return dept@app.callback(    Output('first_surgeon_id', 'children'),    [Input('case_number_filter', 'value'),     Input('filtered_dataset', 'children'),])def getSurId(case_id,jsonified_filtered_data):    filtered_data = pd.read_json(jsonified_filtered_data, orient='split')    id = filtered_data.loc[filtered_data['Case.No'] == case_id]['First.Surgeon.Staff.Id'].unique()[0]    return str(id)############################ Anaesthetist ##################################@app.callback(    Output('principal_anaesthetist_title', 'children'),    [Input('case_number_filter', 'value'),     Input('filtered_dataset', 'children'),])def getAnaTitle(case_id,jsonified_filtered_data):    filtered_data = pd.read_json(jsonified_filtered_data, orient='split')    title = filtered_data.loc[filtered_data['Case.No'] == case_id]['Principal.Anaesthetist.Title'].unique()[0]    return title@app.callback(    Output('principal_anaesthetist_id', 'children'),    [Input('case_number_filter', 'value'),     Input('filtered_dataset', 'children'),])def getAnaId(case_id,jsonified_filtered_data):    filtered_data = pd.read_json(jsonified_filtered_data, orient='split')    id = filtered_data.loc[filtered_data['Case.No'] == case_id]['Principal.Anaesthetist.Staff.Id'].unique()[0]    return str(id)@app.callback(    Output('principal_anaesthetist_primary', 'children'),    [Input('case_number_filter', 'value'),     Input('filtered_dataset', 'children'),])def getAnaPrimary(case_id,jsonified_filtered_data):    filtered_data = pd.read_json(jsonified_filtered_data, orient='split')    primary = filtered_data.loc[filtered_data['Case.No'] == case_id]['Primary.Anae'].unique()[0]    return primary############################ Prediction Summary ##################################@app.callback(    Output('prediction_case_number', 'children'),    [Input('case_number_filter', 'value'),     Input('filtered_dataset', 'children'),])def getCaseNumber(case_id,jsonified_filtered_data):    filtered_data = pd.read_json(jsonified_filtered_data, orient='split')    case = filtered_data.loc[filtered_data['Case.No'] == case_id]['Case.No'].unique()[0]    return str(case)@app.callback(    Output('prediction_procedure_code', 'children'),    [Input('case_number_filter', 'value'),     Input('filtered_dataset', 'children'),])def getProcedureCode(case_id,jsonified_filtered_data):    filtered_data = pd.read_json(jsonified_filtered_data, orient='split')    code = filtered_data.loc[filtered_data['Case.No'] == case_id]['Procedure.Code'].unique()[0]    return code@app.callback(    Output('prediction_moving_average', 'children'),    [Input('case_number_filter', 'value'),     Input('filtered_dataset', 'children'),])def getMAPrediction(case_id,jsonified_filtered_data):    filtered_data = pd.read_json(jsonified_filtered_data, orient='split')    moving_average = filtered_data.loc[filtered_data['Case.No'] == case_id]['Moving.Average'].unique()[0]    return '{}'.format("{0:0.1f}".format(moving_average))@app.callback(    Output('prediction_model_prediction', 'children'),    [Input('case_number_filter', 'value'),     Input('filtered_dataset', 'children'),])def getModelPrediction(case_id,jsonified_filtered_data):    filtered_data = pd.read_json(jsonified_filtered_data, orient='split')    prediction = filtered_data.loc[filtered_data['Case.No'] == case_id]['Predicted.Duration'].unique()[0]    return '{}'.format("{0:0.1f}".format(prediction))if __name__ == '__main__':    app.run_server(debug=True)